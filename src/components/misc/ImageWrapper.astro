---
import path from 'path';
interface Props {
  id?: string;
  src: string;
  class?: string;
  alt?: string;
  basePath?: string;
  imgClass?: string;
}
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

const { id, src, alt, basePath = '/' } = Astro.props;
const className = Astro.props.class;
const imgClass =
  Astro.props.imgClass ?? 'w-full h-full object-center object-cover';

const isLocal = !(
  src.startsWith('/') ||
  src.startsWith('http') ||
  src.startsWith('https') ||
  src.startsWith('data:')
);

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
let img;
if (isLocal) {
  console.log('current path', path.join('../../', basePath, src));
  console.log('src', src);
  const files = import.meta.glob<ImageMetadata>('../../**', {
    import: 'default',
  });
  console.log('files', files);
  const normalizedPath = path
    .normalize(path.join('../../', basePath, src))
    .replace(/\\/g, '/');
  console.log('normalizedPath', normalizedPath);
  img = await files[normalizedPath]();
}
---
<div class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    {isLocal &&
            <Image src={img} alt={alt || ""} class:list={[imgClass]}/>}
    {!isLocal && <img src={src} alt={alt || ""} class:list={[imgClass]}/>}
</div>

