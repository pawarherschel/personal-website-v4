---
import MainGridLayout from "../layouts/MainGridLayout.astro";

import {i18n} from "../i18n/translation";
import I18nKey from "../i18n/i18nKey";

import {exec} from "node:child_process";
import {readFile, access} from "node:fs/promises";

import * as typst from "typst";
import {DOMParser} from "xmldom";
import * as util from "node:util";
import * as fs from "node:fs";

const execPromise = util.promisify(exec);

await execPromise("git --version").then(() => {
    console.log("git is installed");
}).catch(() => {
    throw new Error("git is not available");
});

const folder: "exists" | "not" = await access("node_modules/git/typst", fs.constants.F_OK)
    .then(() => {
        return "exists";
    })
    .catch(() => {
        return "not";
    });

if (folder === "exists") {
    const {gitCloneOut, gitCloneErr} = await execPromise("git -C node_modules/git/typst pull");
} else if ("not") {
    console.log("Cloning typst");
    const {
        gitCloneOut,
        gitCloneErr
    } = await execPromise("git clone https://github.com/pawarherschel/typst.git node_modules/git/typst");
}

await typst.compile("node_modules/git/typst/cv.typ", "node_modules/git/typst/output/cv.svg", {
    fontPath: "node_modules/git/typst/src/fonts/",
});

const svgString = await readFile("node_modules/git/typst/output/cv.svg", "utf-8");

if (svgString === "") {
    throw new Error("Empty svg string");
} else {
    const svgStringPreview = svgString.substring(0, 20);
    console.log(`svg string: ${svgStringPreview}}`);
}

const parser = new DOMParser();
const dom = parser.parseFromString(svgString, "image/svg+xml");
const svgElement = dom.documentElement;
---

<MainGridLayout title={i18n(I18nKey.cv)}>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
        <div class="card-base z-10 px-9 py-6 relative w-full ">
            {svgElement != null ? svgElement : `throw new Error("svgElement is null")`}
        </div>
    </div>
</MainGridLayout>
