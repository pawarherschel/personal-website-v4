---

import MainGridLayout from "../layouts/MainGridLayout.astro";

import {i18n} from "../i18n/translation";
import I18nKey from "../i18n/i18nKey";

import {exec, spawn, spawnSync} from "child_process";

import * as typst from "typst";
import * as fs from "node:fs";
import {DOMParser} from "xmldom";
import * as console from "node:console";

// const gitVersion = exec("git --version", (e, out, err) => {
//     if (e !== null) {
//         console.error(`git version exception: ${e}`);
//     }
//     if (err !== "") {
//         console.log(`git version log: ${out}`);
//     }
//     if (err !== "") {
//         console.error(`git version error: ${err}`);
//     }
// });

const gitVersion = spawnSync("git", ["--version"]);
if (gitVersion.error !== undefined) {
    console.error(`git version exception: ${gitVersion.error}`);
    console.error(`git version error: ${gitVersion.stderr}`);
    console.log(`git version log: ${gitVersion.stdout}`);
} else {
    console.log(`git version log: ${gitVersion.stdout}`);
}

let svgElement = null;

console.log("Trying to clone typst");
const gitClone = spawnSync("git", ["clone", "https://github.com/pawarherschel/typst.git", "node_modules/git/typst"]);
if (gitClone.error !== undefined) {
    console.error(`git clone exception: ${gitClone.error}`);
    console.error(`git clone error: ${gitClone.stderr}`);
    console.log(`git clone log: ${gitClone.stdout}`);
} else {
    console.log("Cloned typst");

    const { status, signal, error, stdout, stderr } = gitClone;
    console.log(`git clone status: ${status}`);
    console.log(`git clone signal: ${signal}`);
    console.log(`git clone error: ${error}`);
    console.log(`git clone log: ${stdout}`);
    console.error(`git clone error: ${stderr}`);

    typst.compile("node_modules/git/typst/cv.typ", "node_modules/git/typst/output/cv.svg", {
        fontPath: "node_modules/git/typst/src/fonts/",
    }).then(() => {
        const svgString = fs.readFileSync("node_modules/git/typst/output/cv.svg", "utf-8");

        while (svgString === "") {
            console.error("svg is empty");
        }

        const parser = new DOMParser();

        const dom = parser.parseFromString(svgString, "image/svg+xml");

        svgElement = dom.documentElement;
    }).catch((err) => {
        console.error(`compile err: ${err}`);
    });
}

---

<MainGridLayout title={i18n(I18nKey.cv)}>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
        <div class="card-base z-10 px-9 py-6 relative w-full ">
            {svgElement}
        </div>
    </div>
</MainGridLayout>
